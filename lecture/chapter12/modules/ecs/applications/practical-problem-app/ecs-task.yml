AWSTemplateFormatVersion: 2010-09-09
Description: refactored ECS task - service A - for AWS Training

Parameters:
  ENV:
    Type: String
    Description: ENV name(prod, stg, dev)
    AllowedValues:
      - prod
      - stg
      - dev
  TaskDefName:
    Type: String
    MaxLength: 28
    Description: ECS task definition name
  BucketName:
    Type: String
  DBHost:
    Type: String
  RedisHost:
    Type: String

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${TaskDefName}-${ENV}"
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "practical-problem-app"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TaskDefName}-${ENV}:latest"
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: "nginx"
              awslogs-group: !Sub "/ecs/${TaskDefName}-${ENV}/practical-problem-app"
          PortMappings:
            - Protocol: tcp
              ContainerPort: 80
          Environment:
            - Name: "DB_HOST"
              Value: !Ref DBHost
            - Name: "REDIS_HOST"
              Value: !Ref RedisHost
            - Name: "BUCKET_NAME"
              Value: !Ref BucketName
          Secrets:
            - Name: !Sub "DB_USERNAME"
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs/${TaskDefName}-${ENV}/DB_USERNAME"
            - Name: !Sub "DB_PASSWORD"
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs/${TaskDefName}-${ENV}/DB_PASSWORD"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${TaskDefName}-${ENV}-ECSTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  ECSTaskExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${TaskDefName}-${ENV}-ECSTaskExecutionPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # ECRにログインするための権限
          - Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
            Resource:
              - "*"
          # 最小の権限
          - Effect: Allow
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "ssm:GetParameters"
            Resource:
              - !GetAtt ECR.Arn
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${TaskDefName}-${ENV}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs/${TaskDefName}-${ENV}/*"
      Roles:
        - !Ref ECSTaskExecutionRole

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${TaskDefName}-${ENV}-ECSTaskRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  ECSTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${TaskDefName}-${ENV}-ECSTaskPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:Get*"
              - "s3:List*"
            Resource: 
              - !Sub "arn:aws:s3:::${BucketName}"
              - !Sub "arn:aws:s3:::${BucketName}/*"
      Roles:
        - !Ref ECSTaskRole

  CloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${TaskDefName}-${ENV}/practical-problem-app"
      RetentionInDays: 180

  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${TaskDefName}-${ENV}"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 30",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  SsmDbUsername:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "データベースのユーザー名"
      Name: !Sub "/ecs/${TaskDefName}-${ENV}/DB_USERNAME"
      Type: String
      Value: uninitialized

  SsmDbPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "データベースのパスワード"
      Name: !Sub "/ecs/${TaskDefName}-${ENV}/DB_PASSWORD"
      Type: String
      Value: uninitialized

Outputs:
  ECSTaskDefARN:
    Value: !Ref TaskDefinition
